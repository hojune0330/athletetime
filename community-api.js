// ÏùµÎ™Ö Í≤åÏãúÌåê API Ïó∞Îèô Ïä§ÌÅ¨Î¶ΩÌä∏
const CommunityAPI = {
  // API ÏóîÎìúÌè¨Ïù∏Ìä∏ - BackendConfig ÏÇ¨Ïö© (ÏûàÏúºÎ©¥)
  getAPIUrl() {
    // BackendConfigÍ∞Ä Î°úÎìúÎêòÏóàÏúºÎ©¥ ÏÇ¨Ïö©
    if (typeof BackendConfig !== 'undefined') {
      return BackendConfig.getBackendURL();
    }
    
    // BackendConfigÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Ï°¥ Î°úÏßÅ ÏÇ¨Ïö© (Ìè¥Î∞±)
    if (window.location.hostname.includes('localhost')) {
      return 'http://localhost:3000';
    } else {
      // Î™®Îì† ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóêÏÑú Render Î∞±ÏóîÎìú ÏÇ¨Ïö©
      return 'https://athletetime-backend.onrender.com';
    }
  },

  // Î™®Îì† Í≤åÏãúÍ∏Ä Í∞ÄÏ†∏Ïò§Í∏∞
  async getPosts() {
    const apiUrl = this.getAPIUrl();
    
    // API URLÏù¥ ÏóÜÏúºÎ©¥ localStorageÎßå ÏÇ¨Ïö©
    if (!apiUrl) {
      console.log('üì¶ localStorage Î™®Îìú (Netlify Îì± Ï†ïÏ†Å Ìò∏Ïä§ÌåÖ)');
      const saved = localStorage.getItem('athletetime_posts');
      return saved ? JSON.parse(saved) : [];
    }
    
    try {
      console.log('üì° API URL:', apiUrl);
      const response = await fetch(`${apiUrl}/api/posts`);
      console.log('üì° Response status:', response.status);
      const data = await response.json();
      console.log('üì° Response data:', data);
      return data.success ? data.posts : [];
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä Î°úÎìú Ïã§Ìå®:', error);
      console.error('Error details:', error.message);
      // localStorage Ìè¥Î∞±
      const saved = localStorage.getItem('athletetime_posts');
      return saved ? JSON.parse(saved) : [];
    }
  },

  // Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Î≥¥Í∏∞
  async getPost(id) {
    try {
      const response = await fetch(`${this.getAPIUrl()}/api/posts/${id}`);
      const data = await response.json();
      return data.success ? data.post : null;
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä Î°úÎìú Ïã§Ìå®:', error);
      return null;
    }
  },

  // Í≤åÏãúÍ∏Ä ÏûëÏÑ±
  async createPost(postData) {
    try {
      const apiUrl = this.getAPIUrl();
      console.log('üì§ Creating post at:', apiUrl);
      console.log('üì§ Post data:', postData);
      
      const response = await fetch(`${apiUrl}/api/posts`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(postData)
      });
      console.log('üì§ Create response status:', response.status);
      const data = await response.json();
      console.log('üì§ Create response data:', data);
      
      if (!data.success) throw new Error(data.message);
      
      // localStorageÏóêÎèÑ Ï†ÄÏû• (Î∞±ÏóÖ)
      const posts = JSON.parse(localStorage.getItem('athletetime_posts') || '[]');
      posts.unshift(data.post);
      localStorage.setItem('athletetime_posts', JSON.stringify(posts));
      
      return data.post;
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®:', error);
      
      // Ïò§ÌîÑÎùºÏù∏ Ìè¥Î∞±: localStorageÏóêÎßå Ï†ÄÏû•
      const newPost = {
        ...postData,
        id: Date.now(),
        date: new Date().toISOString(),
        views: 0,
        likes: [],
        dislikes: [],
        comments: [],
        reports: [],
        isBlinded: false
      };
      
      const posts = JSON.parse(localStorage.getItem('athletetime_posts') || '[]');
      posts.unshift(newPost);
      localStorage.setItem('athletetime_posts', JSON.stringify(posts));
      
      return newPost;
    }
  },

  // Í≤åÏãúÍ∏Ä ÏàòÏ†ï
  async updatePost(id, updateData) {
    try {
      const response = await fetch(`${this.getAPIUrl()}/api/posts/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      });
      const data = await response.json();
      
      if (!data.success) throw new Error(data.message);
      
      // localStorageÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
      const posts = JSON.parse(localStorage.getItem('athletetime_posts') || '[]');
      const index = posts.findIndex(p => p.id === id);
      if (index !== -1) {
        posts[index] = data.post;
        localStorage.setItem('athletetime_posts', JSON.stringify(posts));
      }
      
      return data.post;
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä ÏàòÏ†ï Ïã§Ìå®:', error);
      throw error;
    }
  },

  // Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
  async deletePost(id, password) {
    try {
      const response = await fetch(`${this.getAPIUrl()}/api/posts/${id}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ password })
      });
      const data = await response.json();
      
      if (!data.success) throw new Error(data.message);
      
      // localStorageÏóêÏÑúÎèÑ ÏÇ≠Ï†ú
      const posts = JSON.parse(localStorage.getItem('athletetime_posts') || '[]');
      const filtered = posts.filter(p => p.id !== id);
      localStorage.setItem('athletetime_posts', JSON.stringify(filtered));
      
      return true;
    } catch (error) {
      console.error('Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      throw error;
    }
  },

  // Ï¢ãÏïÑÏöî/Ïã´Ïñ¥Ïöî
  async vote(postId, userId, type) {
    try {
      const response = await fetch(`${this.getAPIUrl()}/api/posts/${postId}/vote`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, type })
      });
      const data = await response.json();
      
      if (!data.success) throw new Error(data.message);
      
      // localStorage ÏóÖÎç∞Ïù¥Ìä∏
      const posts = JSON.parse(localStorage.getItem('athletetime_posts') || '[]');
      const index = posts.findIndex(p => p.id === postId);
      if (index !== -1) {
        posts[index] = data.post;
        localStorage.setItem('athletetime_posts', JSON.stringify(posts));
      }
      
      return data.post;
    } catch (error) {
      console.error('Ìà¨Ìëú Ïã§Ìå®:', error);
      
      // Ïò§ÌîÑÎùºÏù∏ Ìè¥Î∞±
      const posts = JSON.parse(localStorage.getItem('athletetime_posts') || '[]');
      const post = posts.find(p => p.id === postId);
      if (post) {
        // Í∏∞Ï°¥ Ìà¨Ìëú Ï†úÍ±∞
        post.likes = post.likes.filter(id => id !== userId);
        post.dislikes = post.dislikes.filter(id => id !== userId);
        
        // ÏÉà Ìà¨Ìëú Ï∂îÍ∞Ä
        if (type === 'like') {
          post.likes.push(userId);
        } else if (type === 'dislike') {
          post.dislikes.push(userId);
        }
        
        localStorage.setItem('athletetime_posts', JSON.stringify(posts));
        return post;
      }
      
      throw error;
    }
  },

  // ÎåìÍ∏Ä ÏûëÏÑ±
  async addComment(postId, commentData) {
    try {
      const response = await fetch(`${this.getAPIUrl()}/api/posts/${postId}/comments`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(commentData)
      });
      const data = await response.json();
      
      if (!data.success) throw new Error(data.message);
      
      // localStorage ÏóÖÎç∞Ïù¥Ìä∏
      const posts = JSON.parse(localStorage.getItem('athletetime_posts') || '[]');
      const post = posts.find(p => p.id === postId);
      if (post) {
        if (!post.comments) post.comments = [];
        post.comments.push(data.comment);
        localStorage.setItem('athletetime_posts', JSON.stringify(posts));
      }
      
      return data.comment;
    } catch (error) {
      console.error('ÎåìÍ∏Ä ÏûëÏÑ± Ïã§Ìå®:', error);
      
      // Ïò§ÌîÑÎùºÏù∏ Ìè¥Î∞±
      const comment = {
        id: Date.now(),
        ...commentData,
        date: new Date().toISOString(),
        reports: [],
        isBlinded: false
      };
      
      const posts = JSON.parse(localStorage.getItem('athletetime_posts') || '[]');
      const post = posts.find(p => p.id === postId);
      if (post) {
        if (!post.comments) post.comments = [];
        post.comments.push(comment);
        localStorage.setItem('athletetime_posts', JSON.stringify(posts));
      }
      
      return comment;
    }
  },

  // Ïã†Í≥†
  async reportPost(postId, userId) {
    try {
      const response = await fetch(`${this.getAPIUrl()}/api/posts/${postId}/report`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId })
      });
      const data = await response.json();
      
      if (!data.success) throw new Error(data.message);
      
      return data.reports;
    } catch (error) {
      console.error('Ïã†Í≥† Ïã§Ìå®:', error);
      throw error;
    }
  },

  // ÌÜµÍ≥Ñ Í∞ÄÏ†∏Ïò§Í∏∞
  async getStats() {
    try {
      const response = await fetch(`${this.getAPIUrl()}/api/stats`);
      const data = await response.json();
      return data.success ? data.stats : null;
    } catch (error) {
      console.error('ÌÜµÍ≥Ñ Î°úÎìú Ïã§Ìå®:', error);
      return null;
    }
  }
};

// Ï†ÑÏó≠ Í∞ùÏ≤¥Î°ú Îì±Î°ù
window.CommunityAPI = CommunityAPI;